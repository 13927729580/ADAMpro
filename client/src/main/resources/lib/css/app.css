/* 
    Default styles for jsPlumb Toolkit

    Copyright 2015 https://jsplumbtoolkit.com
*/

/* --------------------------------------------------------------------------------------------- */
/* --- SURFACE WIDGET -------------------------------------------------------------------------- */
/* --------------------------------------------------------------------------------------------- */

/*
    Assigned to every node managed by an instance of the Toolkit. They are required to be positioned absolute, to
    enable dragging to work properly.
*/
.jtk-node {
    position: absolute;
}

/*
    This style was created in response to this Chrome bug:
    http://stackoverflow.com/questions/13758215/artifacts-when-css-scaled-in-chrome

    Basically it's about how sometimes there can be artefacts left on screen when the user drags an element. It seems
    the issue has been fixed in more recent versions of Chrome, but the style is left here in case you come across
    the problem.
*/
.jtk-node.jsplumb-drag {
    /*-webkit-backface-visibility: hidden;*/
}

/*
    Assigned to an element that is the `Container` in a `render` call.
    Elements that are acting as Surface widgets should have overflow:hidden set to prevent libs from
    scrolling them during drag (we don't want scrollbars; we have an infinite canvas). Position is set to
    `relative` as this is the parent for nodes, which are positioned absolute (and for absolute positioning
    to work, you need to ensure the parent node has `position:relative`). This style also sets some default
    values for the cursor - using a `grab` cursor where supported.
*/
.jtk-surface {
    overflow: hidden !important;
    position: relative;
    cursor: move;
    cursor: -moz-grab;
    cursor: -webkit-grab;

    /*
        For IE10+. As discussed on this page:

        https://msdn.microsoft.com/en-us/library/ie/jj583807(v=vs.85).aspx

        Microsoft have very helpfully implemented default behaviours for a bunch of touch events and
        then consumed the events so you don't have to be bothered by them. They've "done a lot of research"
        about this stuff and put together a really great default experience for everyone in the entire world.
    */
    touch-action:none;

    /*
        Another Chrome issue that appears to have been fixed in later versions
        http://stackoverflow.com/questions/15464055/css-transition-effect-makes-image-blurry-moves-image-1px-in-chrome
    */
    /*
    -webkit-backface-visibility: hidden;
    -webkit-transform: translateZ(0) scale(1.0, 1.0);
    */
}

/*
    Assigned to the surface when it is being panned. The default is to change the cursor (in browsers that support
    a `grabbing` cursor), and to disable tex selection.
*/
.jtk-surface-panning {
    cursor: -moz-grabbing;
    cursor: -webkit-grabbing;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

/*
    The work area in a surface renderer.
*/
.jtk-surface-canvas {
    overflow: visible !important;
}

/*
    For IE10+. Discussed above in the .jtk-surface styles. This one is specific to elements that are configured
    to be droppable on a Surface via its `registerDroppableNodes` method.
*/
.jtk-surface-droppable-node {
    touch-action:none;
}

/*
    Assigned to a Surface widget when panning is disabled (and therefore the app is relying on scrollbars when the content overflows).
*/
.jtk-surface-nopan {
    overflow: scroll !important;
    cursor:default;
}

/*
Assigned to tile images in a tiled background
*/
.jtk-surface-tile {
    border:none;
    outline:none;
    margin:0;
    -webkit-transition: opacity .3s ease .15s;
    -moz-transition: opacity .3s ease .15s;
    -o-transition: opacity .3s ease .15s;
    -ms-transition: opacity .3s ease .15s;
    transition: opacity .3s ease .15s;
}

/*
    Assigned to the element used for node select with the mouse ("lasso").
*/
.jtk-lasso {
    border: 2px solid rgb(49, 119, 184);
    background-color: WhiteSmoke;
    opacity: 0.5;
    display: none;
    z-index: 20000;
    position: absolute;
}

/*
    This class is added to the document body on lasso drag start and removed at the end of lasso dragging. Its purpose
    is to switch off text selection on all elements while the user is dragging the lasso.
*/
.jtk-lasso-select-defeat * {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

/**
    Added to the lasso mask when it is operating in 'inverted' mode, ie. the excluded parts of the UI are covered, rather
    than the normal mode in which the selected parts of the UI are covered.
*/
.jtk-lasso-mask {
    position:fixed;
    z-index:20000;
    display:none;
    opacity:0.5;
    background-color: #07234E;
    top:0;
    bottom:0;
    left:0;
    right:0;
}

/*
    Assigned to some element that has been selected (either via lasso or programmatically).
*/
.jtk-surface-selected-element {
    border: 2px dashed #f76258 !important;
}

/*
    Assigned to all pan buttons in a surface widget.
*/
.jtk-surface-pan {
    background-color: Azure;
    opacity: 0.4;
    text-align: center;
    cursor: pointer;
    z-index: 2;
    -webkit-transition: background-color 0.15s ease-in;
    -moz-transition: background-color 0.15s ease-in;
    -o-transition: background-color 0.15s ease-in;
    transition: background-color 0.15s ease-in;
}

/*
    Specific styles for the top and bottom pan buttons.
    Top/bottom are 100% width and 20px high by default
*/
.jtk-surface-pan-top, .jtk-surface-pan-bottom {
    width: 100%;
    height: 20px;
}

/*
    Hover styles for all pan buttons.
    On hover, change color, background color, font weight and opacity.
*/
.jtk-surface-pan-top:hover, .jtk-surface-pan-bottom:hover, .jtk-surface-pan-left:hover, .jtk-surface-pan-right:hover {
    opacity: 0.6;
    background-color: rgb(49, 119, 184);
    color: white;
    font-weight: bold;
}

/*
    Specific styles for the left and right pan buttons.
    Left/right pan buttons are 100% height and 20px wide
*/
.jtk-surface-pan-left, .jtk-surface-pan-right {
    width: 20px;
    height: 100%;
    line-height: 40;
}





/* ---------------------------------------------------------------------------------------------------- */
/* --- page structure --------------------------------------------------------------------------------- */
/* ---------------------------------------------------------------------------------------------------- */


.jtk-demo-main {
    background-color: transparent;
    margin-left: auto;
    margin-right: auto;
    max-width:1500px;
    position: relative;
}

.jtk-demo-canvas {
    margin-left: 160px;
    height:550px;
    max-height:700px;
    border:1px solid #CCC;
    background-color:white;
}

.canvas-wide {
    margin-left:0;
}



/* ---------------------------------------------------------------------------------------------------- */
/* --- jsPlumb setup ---------------------------------------------------------------------------------- */
/* ---------------------------------------------------------------------------------------------------- */

.jsplumb-connector {
    z-index:9;
}

.jsplumb-endpoint {
    z-index:12;
    opacity:0.8;
    cursor:pointer;
}

.jsplumb-overlay {
    background-color: white;
    color: #434343;
    font-weight: 400;
    padding: 4px;
    z-index:10;

}

.jsplumb-overlay.jsplumb-hover {
    color: #434343;
}

path {
    cursor:pointer;
}



.w {
    padding: 16px;
    position: absolute;
    z-index: 4;
    border: solid 1px #ababab;
    border-radius: 8px;
    opacity: 0.8;
    cursor: move;
    background-color: white;
    font-size: 11px;
    -webkit-transition: background-color 0.1s ease-in;
    -moz-transition: background-color 0.1s ease-in;
    transition: background-color 0.1s ease-in;
    width: 200px;
}

.w:hover {
    background-color: #e8e6e3;
}

.ep {
    top: 37%;
    border-radius: 50%;
    behavior: url(PIE.htc); /* remove if you don't care about IE8 */
    position: absolute;
    right: 10px;
    width: 1em;
    height: 1em;
    background-color: #26a69a;
    cursor: pointer;
    -webkit-transition: -webkit-box-shadow 0.25s ease-in;
    -moz-transition: -moz-box-shadow 0.25s ease-in;
    transition: box-shadow 0.25s ease-in;
}

.w .collapsible {
    border: none;
    margin: 0px;
    box-shadow: none;
}

.w .collapsible div {
    margin: 0px;
    padding: 0px;
    background-color: transparent;
    border: none;
}

path, .jsplumb-endpoint { cursor:pointer; }

.btnClose {
    top: -5px;
    right: -5px;
    border-radius: 50%;
    position: absolute;
    width: 14px;
    height: 14px;
    color: white;
    background-color: #f44346;
    cursor: pointer;
    transition: visibility 0s, opacity 0.25s linear;
    visibility: hidden;
    opacity:0;
    z-index: 100;
}

.w:hover .btnClose{
    visibility: visible;
    opacity:1;
}


