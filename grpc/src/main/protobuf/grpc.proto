syntax = "proto3";

option java_package = "ch.unibas.dmi.dbis.adam.http";





//****  SERVICES ****//


service AdamDefinition {
  rpc CreateEntity(CreateEntityMessage) returns (AckMessage) {}
  rpc DropEntity(EntityNameMessage) returns (AckMessage) {}
  rpc Insert(stream InsertMessage) returns (AckMessage) {}
  //creates an index on the data
  rpc Index(IndexMessage) returns (AckMessage) {}
  rpc DropIndex(IndexNameMessage) returns (AckMessage) {}
  rpc Count(EntityNameMessage) returns (AckMessage) {}
  //generates an entity with random data and with all available indexes (for demo purposes)
  rpc PrepareForDemo(GenerateRandomEntityMessage) returns (AckMessage) {}
  rpc ListEntities(Empty) returns (EntitiesMessage) {}
  rpc GetEntityProperties(EntityNameMessage) returns (EntityPropertiesMessage) {}
}

service AdamSearch {
  //caches an index explicitly (before performing a query to speed up retrieval time)
  rpc CacheIndex (IndexNameMessage) returns (AckMessage) {}
  rpc CacheEntity (EntityNameMessage) returns (AckMessage) {}
  //performs a query on an entity with hints on which search method to use
  //(if no hint is specified a fallback is used)
  rpc DoStandardQuery(SimpleQueryMessage) returns (QueryResponseInfoMessage) {}
  //performs a sequential query
  rpc DoSequentialQuery(SimpleSequentialQueryMessage) returns (QueryResponseInfoMessage) {}
  //performs a query with specified index name
  rpc DoSpecifiedIndexQuery(SimpleSpecifiedIndexQueryMessage) returns (QueryResponseInfoMessage) {}
  //performs a query with specified entity name and index type
  rpc DoIndexQuery(SimpleIndexQueryMessage) returns (QueryResponseInfoMessage) {}
  //performs a progressive query, note that the results are a stream
  rpc DoProgressiveQuery(SimpleQueryMessage) returns (stream QueryResponseInfoMessage) {}
  //performs a timed progressive query which will stop after the specified running time
  rpc DoTimedProgressiveQuery(TimedQueryMessage) returns (QueryResponseInfoMessage) {}
  //performs a compound query
  rpc DoCompoundQuery(CompoundQueryMessage) returns (CompoundQueryResponseInfoMessage) {}
  //performs a boolean query
  rpc DoBooleanQuery(SimpleBooleanQueryMessage) returns (QueryResponseInfoMessage) {}
  //return cached results
  rpc GetCachedResults(CachedResultsMessage) returns (QueryResponseInfoMessage) {}
}




//****  GLOBALS ****//

enum IndexType {
    ecp = 0;
    lsh = 1;
    pq = 2;
    sh = 3;
    vaf = 4;
    vav = 5;
}

message Empty {
}






//****  DATA DEFINITION REQUESTS ****//

message CreateEntityMessage {
  string entity = 1;
  enum FieldType {
    LONG = 0;
    INT = 1;
    FLOAT = 2;
    DOUBLE = 3;
    STRING = 4;
    BOOLEAN = 5;
  }
  map<string, FieldType> fields = 2;
}

message EntityNameMessage {
  string entity = 1;
}

message IndexNameMessage {
  string index = 1;
}

message GenerateRandomEntityMessage {
  string entity = 1;
  int32 ntuples = 2;
  int32 ndims = 3;
}

message InsertMessage {
  string entity = 1;
  repeated TupleInsertMessage tuples = 2;

  message TupleInsertMessage {
    repeated float vector = 1 [packed=true];
    map<string, string> metadata = 2;
  }
}

message IndexMessage {
  string entity = 1;
  IndexType indextype = 2;
  DistanceMessage distance = 3;
  //for possible options see each index structure
  map<string, string> options = 4;
}






//****  METADATA REQUESTS ****//

message EntitiesMessage {
  repeated string entities = 1;
}

message EntityPropertiesMessage {
  string entity = 1;
  map<string, string> properties = 2;
}






//****  QUERY REQUESTS ****//

message SimpleQueryMessage {
  string queryid = 1;
  string entity = 2;
  //for hints see  ch.unibas.dmi.dbis.adam.query.handler.QueryHints, possible values
  //include "index", "inexact", "ecp", "lsh", "pq", "sh", "exact", "va", "vaf", "vav"
  repeated string hints = 3;
  NearestNeighbourQueryMessage nnq = 4;
  BooleanQueryMessage bq = 5;
  //specifies whether we should join the structured metadata to the results
  bool withMetadata = 6;
  bool readFromCache = 7;
  bool putInCache = 8;
}

message SimpleBooleanQueryMessage {
  string queryid = 1;
  string entity = 2;
  BooleanQueryMessage bq = 3;
  //specifies whether we should join the structured metadata to the results
  bool readFromCache = 4;
  bool putInCache = 5;
}

message SimpleSequentialQueryMessage {
  string queryid = 1;
  string entity = 2;
  NearestNeighbourQueryMessage nnq = 3;
  BooleanQueryMessage bq = 4;
  //specifies whether we should join the structured metadata to the results
  bool withMetadata = 5;
  bool readFromCache = 6;
  bool putInCache = 7;
}

message SimpleSpecifiedIndexQueryMessage {
  string queryid = 1;
  string index = 2;
  NearestNeighbourQueryMessage nnq = 3;
  BooleanQueryMessage bq = 4;
  //specifies whether we should join the structured metadata to the results
  bool withMetadata = 5;
  bool readFromCache = 6;
  bool putInCache = 7;
}

message SimpleIndexQueryMessage {
  string queryid = 1;
  string entity = 2;
  IndexType indextype = 3;
  NearestNeighbourQueryMessage nnq = 4;
  BooleanQueryMessage bq = 5;
  //specifies whether we should join the structured metadata to the results
  bool withMetadata = 6;
  bool readFromCache = 7;
  bool putInCache = 8;
}

message TimedQueryMessage {
  string queryid = 1;
  string entity = 2;
  NearestNeighbourQueryMessage nnq = 3;
  BooleanQueryMessage bq = 4;
  //maximum duration of query in ms
  int64 time = 5;
  bool withMetadata = 6;
}

message CompoundQueryMessage {
  //if an id is specified, the id of the block is returned in the intermediate results
  string queryid = 1;
  string entity = 2;
  NearestNeighbourQueryMessage nnq = 3;
  BooleanQueryMessage bq = 4;
  SubExpressionQueryMessage indexFilterExpression = 5;
  bool withMetadata = 6;
  //specifies whether intermediate results should be returned (i.e. of all sub-expressions and not only the final result)
  bool withIntermediateResults = 7;
}

message ExpressionQueryMessage {
  string queryid = 1;
  enum Operation {
      UNION = 0;
      INTERSECT = 1;
      EXCEPT = 2;
    }

   enum OperationOrder {
      LEFTFIRST = 0;
      RIGHTFIRST = 1;
      PARALLEL = 2;
    }

   SubExpressionQueryMessage left = 2;
   Operation operation = 3;
   OperationOrder order = 4;
   SubExpressionQueryMessage right = 5;

}

message SubExpressionQueryMessage {
    string queryid = 1;
   //Any is not yet supported
   //import "google/protobuf/any.proto";
   //google.protobuf.Any left = 1;
   //Operation operation = 2;
   //google.protobuf.Any right = 3;
    oneof submessage {
       SimpleSequentialQueryMessage ssqm = 2;
       SimpleSpecifiedIndexQueryMessage ssiqm = 3;
       SimpleIndexQueryMessage siqm = 4;
       ExpressionQueryMessage eqm = 5;
     }
}

message NearestNeighbourQueryMessage {
  repeated float query = 1 [packed=true];
  DistanceMessage distance = 2;
  int32 k = 3;
  //specifies whether only the candidates from the index search are returned and no exact distance computation is performed
  bool indexOnly = 4;
  //for possible options see each index structure
  map<string, string> options = 5;
}

message DistanceMessage {
  enum DistanceType {
    minkowski = 0; //add option 'norm'
  }
  DistanceType distancetype = 1;
  map<string, string> options = 2;
}

message BooleanQueryMessage {
  repeated WhereMessage where = 2;
  repeated JoinMessage joins = 3;
  repeated int64 prefilter = 1;

  message WhereMessage {
    //if field ends on certain operators (e.g., != or IN), then the operation used in query is adapted, otherwise equality is used
    string field = 1;
    string value = 2;
  }

  message JoinMessage {
    string table = 1;
    repeated string columns = 2;
  }
}

message CachedResultsMessage {
  string queryid = 1;
}





//****  RESPONSES ****//

message AckMessage {
  enum Code {
    OK = 0;
    ERROR = 1;
  }
  Code code = 1;
  string message = 2;
}

message CompoundQueryResponseInfoMessage {
  repeated QueryResponseInfoMessage responses = 1;
}

message QueryResponseInfoMessage {
  //id of result (given in the query)
  string queryid = 1;
  //confidence in results (between 0 - 1)
  double confidence = 2;
  //retrieval time
  int64 time = 3;
  string source = 4;
  //result list
  repeated QueryResultMessage results = 5;
}

message QueryResultMessage {
  int64 id = 1;
  float distance = 2;
  map<string, string> metadata = 3;
}
